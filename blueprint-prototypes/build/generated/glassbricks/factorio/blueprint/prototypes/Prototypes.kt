// Generated by prototype-codegen
@file:Suppress(
    "EnumEntryName",
    "PropertyName",
)
@file:UseSerializers(
    PositionShorthandSerializer::class,
    BoundingBoxShorthandSerializer::class,
    LuaListSerializer::class,
)
@file:OptIn(ExperimentalSerializationApi::class)

package glassbricks.factorio.blueprint.prototypes

import glassbricks.factorio.blueprint.BoundingBox
import glassbricks.factorio.blueprint.Direction
import glassbricks.factorio.blueprint.Position
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.UseSerializers
import kotlinx.serialization.json.JsonNames

/**
 * The abstract base for prototypes. PrototypeBase defines the common features of prototypes, such
 * as localization and order.
 */
@Serializable
public sealed class PrototypeBase {
    /**
     * Specifies the kind of prototype this is.
     *
     * For a list of all types used in vanilla, see [data.raw](https://wiki.factorio.com/Data.raw).
     */
    public lateinit var type: String
        protected set

    /**
     * Unique textual identification of the prototype. May not contain a dot, nor exceed a length of
     * 200 characters.
     *
     * For a list of all names used in vanilla, see [data.raw](https://wiki.factorio.com/Data.raw).
     */
    public lateinit var name: String
        protected set

    override fun toString(): String = "${this::class.simpleName}($name)"
}

/**
 * Abstract base of all entities in the game. Entity is nearly everything that can be on the map
 * (except tiles).
 *
 * For in game script access to entity, take a look at [LuaEntity](runtime:LuaEntity).
 */
@Serializable
public sealed class EntityPrototype : PrototypeBase() {
    /**
     * Specification of the entity collision boundaries. Empty collision box means no collision and
     * is used for smoke, projectiles, particles, explosions etc.
     *
     * The `{0,0}` coordinate in the collision box will match the entity position. It should be near
     * the center of the collision box, to keep correct entity drawing order. The bounding box must
     * include the `{0,0}` coordinate.
     *
     * Note, that for buildings, it is customary to leave 0.1 wide border between the edge of the
     * tile and the edge of the building, this lets the player move between the building and electric
     * poles/inserters etc.
     */
    public var collision_box: BoundingBox? = null
        protected set

    /**
     * Two entities can collide only if they share a layer from the collision mask.
     */
    public var collision_mask: CollisionMask? = null
        protected set

    public var flags: EntityPrototypeFlags? = null
        protected set

    /**
     * Supported values are 1 (for 1x1 grid) and 2 (for 2x2 grid, like rails).
     *
     * Internally forced to be `2` for [RailPrototype](prototype:RailPrototype),
     * [RailRemnantsPrototype](prototype:RailRemnantsPrototype) and
     * [TrainStopPrototype](prototype:TrainStopPrototype).
     */
    public var build_grid_size: UByte? = null
        protected set

    /**
     * Item that when placed creates this entity. Determines which item is picked when "Q" (smart
     * pipette) is used on this entity. Determines which item and item amount is needed in a blueprint
     * of this entity and to revive a ghost of this entity.
     *
     * The item count specified here can't be larger than the stack size of that item.
     */
    public var placeable_by: ItemOrArray<ItemToPlace>? = null
        protected set

    /**
     * Used to determine how the center of the entity should be positioned when building (unless the
     * off-grid [flag](prototype:EntityPrototypeFlags) is specified).
     *
     * When the tile width is odd, the center will be in the center of the tile, when it is even,
     * the center is on the tile transition.
     */
    public var tile_width: UInt? = null
        protected set

    public var tile_height: UInt? = null
        protected set
}

/**
 * Abstract base of all entities with health in the game.
 */
@Serializable
public sealed class EntityWithHealthPrototype : EntityPrototype()

/**
 * Abstract base of all entities with a force in the game. These entities have a
 * [LuaEntity::unit_number](runtime:LuaEntity::unit_number) during runtime. Can be high priority
 * [military targets](https://wiki.factorio.com/Military_units_and_structures).
 */
@Serializable
public sealed class EntityWithOwnerPrototype : EntityWithHealthPrototype()

/**
 * Entity with energy source with specialised animation for charging/discharging. Used for the
 * [accumulator](https://wiki.factorio.com/Accumulator) entity.
 */
@Serializable
@SerialName("accumulator")
public class AccumulatorPrototype : EntityWithOwnerPrototype() {
    /**
     * The capacity of the energy source buffer specifies the capacity of the accumulator.
     */
    public lateinit var energy_source: ElectricEnergySource
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set

    /**
     * The name of the signal that is the default for when an accumulator is connected to the
     * circuit network.
     */
    public var default_output_signal: SignalIDConnector? = null
        protected set
}

/**
 * Possible configuration for all items.
 */
@Serializable
@SerialName("item")
public open class ItemPrototype : PrototypeBase() {
    /**
     * Count of items of the same name that can be stored in one inventory slot. Must be 1 when the
     * `"not-stackable"` flag is set.
     */
    public var stack_size: ItemCountType = 0u
        protected set

    /**
     * Name of the [EntityPrototype](prototype:EntityPrototype) that can be built using this item.
     * If this item should be the one that construction bots use to build the specified `place_result`,
     * set the `"primary-place-result"` [item flag](prototype:ItemPrototypeFlags).
     *
     * The localised name of the entity will be used as the in-game item name. This behavior can be
     * overwritten by specifying `localised_name` on this item, it will be used instead.
     */
    public var place_result: EntityID? = null
        protected set

    /**
     * Must exist when a nonzero fuel_value is defined.
     */
    public var fuel_category: FuelCategoryID? = null
        protected set

    /**
     * Specifies some properties of the item.
     */
    public var flags: ItemPrototypeFlags? = null
        protected set
}

/**
 * Ammo used for a gun.
 */
@Serializable
@SerialName("ammo")
public class AmmoItemPrototype : ItemPrototype()

/**
 * A turret that needs no extra ammunition. See the children for turrets that need some kind of
 * ammunition.
 */
@Serializable
@SerialName("turret")
public open class TurretPrototype : EntityWithOwnerPrototype()

/**
 * A turret that consumes [ammo items](prototype:AmmoItemPrototype).
 */
@Serializable
@SerialName("ammo-turret")
public class AmmoTurretPrototype : TurretPrototype()

/**
 * Abstract base type for decider and arithmetic combinators.
 */
@Serializable
public sealed class CombinatorPrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: EVEnergySource
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * An [arithmetic combinator](https://wiki.factorio.com/Arithmetic_combinator).
 */
@Serializable
@SerialName("arithmetic-combinator")
public class ArithmeticCombinatorPrototype : CombinatorPrototype()

/**
 * Items with a "durability". Used for [science packs](https://wiki.factorio.com/Science_pack).
 */
@Serializable
@SerialName("tool")
public open class ToolPrototype : ItemPrototype()

/**
 * Armor to wear on your in-game [character](prototype:CharacterPrototype) for defense and buffs.
 */
@Serializable
@SerialName("armor")
public class ArmorPrototype : ToolPrototype()

/**
 * An [artillery turret](https://wiki.factorio.com/Artillery_turret).
 */
@Serializable
@SerialName("artillery-turret")
public class ArtilleryTurretPrototype : EntityWithOwnerPrototype()

/**
 * Abstract base of all vehicles.
 */
@Serializable
public sealed class VehiclePrototype : EntityWithOwnerPrototype()

/**
 * The abstract base of all rolling stock.
 */
@Serializable
public sealed class RollingStockPrototype : VehiclePrototype() {
    public var allow_manual_color: Boolean? = null
        protected set
}

/**
 * An [artillery wagon](https://wiki.factorio.com/Artillery_wagon).
 */
@Serializable
@SerialName("artillery-wagon")
public class ArtilleryWagonPrototype : RollingStockPrototype()

/**
 * The abstract basis of the assembling machines and furnaces. Contains the properties that both of
 * them have.
 *
 * Note that a crafting machine cannot be rotated unless it has at least one of the following: a
 * fluid box, a heat energy source, a fluid energy source, or a non-square collision box. Crafting
 * machines with non-square collision boxes can only be rotated before placement, not after.
 */
@Serializable
public sealed class CraftingMachinePrototype : EntityWithOwnerPrototype() {
    /**
     * How fast this crafting machine can craft. 1 means that for example a 1 second long recipe
     * take 1 second to craft. 0.5 means it takes 2 seconds, and 2 means it takes 0.5 seconds.
     *
     * Crafting speed has to be positive.
     */
    public var crafting_speed: Double = 0.0
        protected set

    /**
     * A list of [recipe categories](prototype:RecipeCategory) this crafting machine can use.
     */
    public lateinit var crafting_categories: List<RecipeCategoryID>
        protected set

    /**
     * Defines how the crafting machine is powered.
     *
     * When using an electric energy source and `drain` is not specified, it will be set to
     * `energy_usage ÷ 30` automatically.
     */
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * Can have `off_when_no_fluid_recipe` key that has a [bool](prototype:bool) value.
     * `off_when_no_fluid_recipe` defaults to false. `off_when_no_fluid_recipe` is ignored by
     * [FurnacePrototype](prototype:FurnacePrototype) and considered to always be false.
     *
     * If a crafting machine has fluid boxes *and* `off_when_no_fluid_recipe` is true, the crafting
     * machine can only be rotated when a recipe consuming or producing fluid is set, or it has one of
     * the other properties listed at the top of the page.
     */
    public var fluid_boxes: List<FluidBox>? = null
        protected set

    /**
     * Sets the [modules](prototype:ModulePrototype) and [beacon](prototype:BeaconPrototype) effects
     * that are allowed to be used on this machine.
     *
     * Note: If the time to complete a recipe is shorter than one tick, only one craft can be
     * completed per tick, but productivity bonus is applied to the non-limited ''completable'' work.
     * For a simple example, if a recipe were to take half a tick, only one recipe would be completed,
     * but twice the productivity bonus would occur. The surplus production from productivity is
     * **not** limited to one craft per tick.
     */
    public var allowed_effects: EffectTypeLimitation? = null
        protected set

    /**
     * Productivity bonus that this machine always has.
     */
    public var base_productivity: Float? = null
        protected set

    /**
     * The number of module slots in this machine, and their icon positions.
     */
    public var module_specification: ModuleSpecification? = null
        protected set
}

/**
 * An assembling machine - like the assembling machines 1/2/3 in the game, but you can use your own
 * recipe categories.
 */
@Serializable
@SerialName("assembling-machine")
public open class AssemblingMachinePrototype : CraftingMachinePrototype() {
    /**
     * The preset recipe of this machine. This machine does not show a recipe selection if this is
     * set. The base game uses this for the [rocket silo](https://wiki.factorio.com/Rocket_silo).
     */
    public var fixed_recipe: RecipeID? = null
        protected set

    /**
     * Sets the maximum number of ingredients this machine can craft with. Any recipe with more
     * ingredients than this will be unavailable in this machine.
     *
     * This only counts item ingredients, not fluid ingredients! This means if ingredient count is
     * 2, and the recipe has 2 item ingredients and 1 fluid ingredient, it can still be crafted in the
     * machine.
     */
    public var ingredient_count: UByte? = null
        protected set
}

/**
 * Entity with the ability to transfer [module](prototype:ModulePrototype) effects to its
 * neighboring entities.
 */
@Serializable
@SerialName("beacon")
public class BeaconPrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: EVEnergySource
        protected set

    /**
     * The maximum distance that this beacon can supply its neighbors with its module's effects. Max
     * distance is 64.
     */
    public var supply_area_distance: Double = 0.0
        protected set

    /**
     * The multiplier of the module's effects, when shared between neighbors.
     */
    public var distribution_effectivity: Double = 0.0
        protected set

    /**
     * The number of module slots in this beacon and their icon positions.
     */
    public lateinit var module_specification: ModuleSpecification
        protected set

    /**
     * The types of [modules](prototype:ModulePrototype) that a player can place inside of the
     * beacon.
     */
    public var allowed_effects: EffectTypeLimitation? = null
        protected set
}

/**
 * Like a normal item but with the ability to have a colored label.
 */
@Serializable
@SerialName("item-with-label")
public open class ItemWithLabelPrototype : ItemPrototype()

/**
 * The inventory allows setting player defined filters similar to cargo wagon inventories.
 */
@Serializable
@SerialName("item-with-inventory")
public open class ItemWithInventoryPrototype : ItemWithLabelPrototype()

/**
 * A [blueprint book](https://wiki.factorio.com/Blueprint_book).
 */
@Serializable
@SerialName("blueprint-book")
public class BlueprintBookPrototype : ItemWithInventoryPrototype()

/**
 * Used in the base game as a base for the blueprint item and the deconstruction item.
 */
@Serializable
@SerialName("selection-tool")
public open class SelectionToolPrototype : ItemWithLabelPrototype()

/**
 * A [blueprint](https://wiki.factorio.com/Blueprint).
 */
@Serializable
@SerialName("blueprint")
public class BlueprintItemPrototype : SelectionToolPrototype()

/**
 * A [boiler](https://wiki.factorio.com/Boiler). It heats fluid and optionally outputs it as a
 * different fluid.
 */
@Serializable
@SerialName("boiler")
public class BoilerPrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * The input fluid box.
     *
     * If `mode` is `"heat-water-inside"`, the fluid is heated up directly in this fluidbox.
     */
    public lateinit var fluid_box: FluidBox
        protected set

    /**
     * The output fluid box.
     *
     * If `mode` is `"output-to-separate-pipe"` and this has a [filter](prototype:FluidBox::filter),
     * the heated input fluid is converted to the output fluid that is set in the filter (in a 1:1
     * ratio).
     *
     * If `mode` is `"heat-water-inside"`, this fluidbox is unused.
     */
    public lateinit var output_fluid_box: FluidBox
        protected set
}

/**
 * An entity that produces power from a burner energy source.
 */
@Serializable
@SerialName("burner-generator")
public class BurnerGeneratorPrototype : EntityWithOwnerPrototype() {
    /**
     * The output energy source of the generator. Any emissions specified on this energy source are
     * ignored, they must be specified on `burner`.
     */
    public lateinit var energy_source: ElectricEnergySource
        protected set

    /**
     * The input energy source of the generator.
     */
    public lateinit var burner: BurnerEnergySource
        protected set
}

/**
 * A capsule, for example a [combat robot capsule](https://wiki.factorio.com/Combat_robot_capsules)
 * or the [raw fish](https://wiki.factorio.com/Raw_fish).
 */
@Serializable
@SerialName("capsule")
public class CapsulePrototype : ItemPrototype()

/**
 * A [cargo wagon](https://wiki.factorio.com/Cargo_wagon).
 */
@Serializable
@SerialName("cargo-wagon")
public class CargoWagonPrototype : RollingStockPrototype() {
    /**
     * Size of the inventory of the wagon. The inventory can be limited using the red bar and
     * filtered. This functionality cannot be turned off.
     */
    public var inventory_size: ItemStackIndex = 0u
        protected set
}

/**
 * A [constant combinator](https://wiki.factorio.com/Constant_combinator).
 */
@Serializable
@SerialName("constant-combinator")
public class ConstantCombinatorPrototype : EntityWithOwnerPrototype() {
    public var item_slot_count: UInt = 0u
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A generic container, such as a chest. Cannot be rotated.
 */
@Serializable
public enum class InventoryType {
    with_bar,
    with_filters_and_bar,
}

/**
 * A generic container, such as a chest. Cannot be rotated.
 */
@Serializable
@SerialName("container")
public open class ContainerPrototype : EntityWithOwnerPrototype() {
    /**
     * The number of slots in this container.
     */
    public var inventory_size: ItemStackIndex = 0u
        protected set

    /**
     * Whether the inventory of this container can be filtered (like cargo wagons) or not.
     */
    public var inventory_type: InventoryType? = null
        protected set

    /**
     * The maximum circuit wire distance for this container.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A copy-paste or cut-paste tool.
 */
@Serializable
@SerialName("copy-paste-tool")
public class CopyPasteToolPrototype : SelectionToolPrototype()

/**
 * The abstract base of both rail prototypes.
 */
@Serializable
public sealed class RailPrototype : EntityWithOwnerPrototype()

/**
 * A curved rail.
 */
@Serializable
@SerialName("curved-rail")
public class CurvedRailPrototype : RailPrototype()

/**
 * A [decider combinator](https://wiki.factorio.com/Decider_combinator).
 */
@Serializable
@SerialName("decider-combinator")
public class DeciderCombinatorPrototype : CombinatorPrototype()

/**
 * A [deconstruction planner](https://wiki.factorio.com/Deconstruction_planner).
 */
@Serializable
@SerialName("deconstruction-item")
public class DeconstructionItemPrototype : SelectionToolPrototype()

/**
 * Entity with electric energy source with that can have some of its values changed runtime. Useful
 * for modding in energy consumers/producers.
 */
@Serializable
@SerialName("electric-energy-interface")
public class ElectricEnergyInterfacePrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: ElectricEnergySource
        protected set
}

/**
 * An electric pole - part of the [electric system](https://wiki.factorio.com/Electric_system).
 */
@Serializable
@SerialName("electric-pole")
public class ElectricPolePrototype : EntityWithOwnerPrototype() {
    /**
     * The "radius" of this pole's supply area. Corresponds to *half* of the "supply area" in the
     * item tooltip. If this is 3.5, the pole will have a 7x7 supply area.
     *
     * Max value is 64.
     */
    public var supply_area_distance: Double = 0.0
        protected set

    /**
     * The maximum distance between this pole and any other connected pole - if two poles are
     * farther apart than this, they cannot be connected together directly. Corresponds to "wire reach"
     * in the item tooltip.
     *
     * Max value is 64.
     */
    public var maximum_wire_distance: Double? = null
        protected set
}

/**
 * A turret that uses electricity as ammunition.
 */
@Serializable
@SerialName("electric-turret")
public class ElectricTurretPrototype : TurretPrototype() {
    public lateinit var energy_source: EVEnergySource
        protected set
}

/**
 * A turret that uses [fluid](prototype:FluidPrototype) as ammunition.
 */
@Serializable
@SerialName("fluid-turret")
public class FluidTurretPrototype : TurretPrototype() {
    public lateinit var fluid_box: FluidBox
        protected set
}

/**
 * A [fluid wagon](https://wiki.factorio.com/Fluid_wagon).
 */
@Serializable
@SerialName("fluid-wagon")
public class FluidWagonPrototype : RollingStockPrototype() {
    /**
     * Must be 1, 2 or 3.
     */
    public var tank_count: UByte? = null
        protected set
}

/**
 * A furnace. Normal furnaces only process "smelting" category recipes, but you can make furnaces
 * that process other [recipe categories](prototype:RecipeCategory). The difference to assembling
 * machines is that furnaces automatically choose their recipe based on input.
 */
@Serializable
@SerialName("furnace")
public class FurnacePrototype : CraftingMachinePrototype()

/**
 * A [gate](https://wiki.factorio.com/Gate).
 */
@Serializable
@SerialName("gate")
public class GatePrototype : EntityWithOwnerPrototype()

/**
 * An entity that produces power from fluids, for example a [steam
 * engine](https://wiki.factorio.com/Steam_engine).
 */
@Serializable
@SerialName("generator")
public class GeneratorPrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: ElectricEnergySource
        protected set

    /**
     * This must have a filter if `max_power_output` is not defined.
     */
    public lateinit var fluid_box: FluidBox
        protected set
}

/**
 * A gun. A weapon to deal damage to entities.
 */
@Serializable
@SerialName("gun")
public class GunPrototype : ItemPrototype()

/**
 * This entity produces or consumes heat. Its heat settings can be changed runtime.
 */
@Serializable
@SerialName("heat-interface")
public class HeatInterfacePrototype : EntityWithOwnerPrototype()

/**
 * A [heat pipe](https://wiki.factorio.com/Heat_pipe).
 */
@Serializable
@SerialName("heat-pipe")
public class HeatPipePrototype : EntityWithOwnerPrototype()

/**
 * A generic container, such as a chest, that interacts with the logistics network.
 */
@Serializable
public enum class LogisticMode {
    `active-provider`,
    `passive-provider`,
    requester,
    storage,
    buffer,
}

/**
 * A generic container, such as a chest, that interacts with the logistics network.
 */
@Serializable
@SerialName("logistic-container")
public open class LogisticContainerPrototype : ContainerPrototype() {
    /**
     * The way this chest interacts with the logistic network.
     */
    public var logistic_mode: LogisticMode? = null
        protected set

    /**
     * The number of request slots this logistics container has. Requester-type containers must have
     * > 0 slots and can have a maximum of 1000 slots. Storage-type containers must have <= 1 slot.
     */
    public var max_logistic_slots: UShort? = null
        protected set
}

/**
 * A generic container, such as a chest, that can spawn or void items and interact with the
 * logistics network.
 */
@Serializable
@SerialName("infinity-container")
public class InfinityContainerPrototype : LogisticContainerPrototype()

/**
 * An entity to transport fluids over a distance and between machines.
 */
@Serializable
@SerialName("pipe")
public open class PipePrototype : EntityWithOwnerPrototype() {
    /**
     * The area of the entity where fluid/gas inputs, and outputs.
     */
    public lateinit var fluid_box: FluidBox
        protected set
}

/**
 * This entity produces or consumes fluids. Its fluid settings can be changed runtime.
 */
@Serializable
@SerialName("infinity-pipe")
public class InfinityPipePrototype : PipePrototype()

/**
 * An [inserter](https://wiki.factorio.com/Inserter).
 */
@Serializable
@SerialName("inserter")
public class InserterPrototype : EntityWithOwnerPrototype() {
    public lateinit var insert_position: Vector
        protected set

    public lateinit var pickup_position: Vector
        protected set

    /**
     * Defines how this inserter gets energy. The emissions set on the energy source are ignored so
     * inserters cannot produce pollution.
     */
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * How many filters this inserter has. Maximum count of filtered items in inserter is 5.
     */
    public var filter_count: UByte? = null
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * ItemWithEntityData saves data associated with the entity that it represents, for example the
 * content of the equipment grid of a car.
 */
@Serializable
@SerialName("item-with-entity-data")
public class ItemWithEntityDataPrototype : ItemPrototype()

/**
 * Item type that can store any basic arbitrary Lua data, see
 * [LuaItemStack::tags](runtime:LuaItemStack::tags).
 */
@Serializable
@SerialName("item-with-tags")
public class ItemWithTagsPrototype : ItemWithLabelPrototype()

/**
 * A [lab](https://wiki.factorio.com/Lab). It consumes [science packs](prototype:ToolPrototype) to
 * research [technologies](prototype:TechnologyPrototype).
 */
@Serializable
@SerialName("lab")
public class LabPrototype : EntityWithOwnerPrototype() {
    /**
     * Defines how this lab gets energy.
     */
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * A list of the names of science packs that can be used in this lab.
     *
     * If a technology requires other types of science packs, it cannot be researched in this lab.
     */
    public lateinit var inputs: List<ItemID>
        protected set

    /**
     * Sets the [modules](prototype:ModulePrototype) and [beacon](prototype:BeaconPrototype) effects
     * that are allowed to be used on this lab.
     */
    public var allowed_effects: EffectTypeLimitation? = null
        protected set

    /**
     * Productivity bonus that this machine always has.
     */
    public var base_productivity: Float? = null
        protected set

    /**
     * The number of module slots.
     */
    public var module_specification: ModuleSpecification? = null
        protected set
}

/**
 * A [lamp](https://wiki.factorio.com/Lamp) to provide light, using energy.
 */
@Serializable
@SerialName("lamp")
public class LampPrototype : EntityWithOwnerPrototype() {
    /**
     * The emissions set on the energy source are ignored so lamps cannot produce pollution.
     */
    public lateinit var energy_source: EVEnergySource
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A [land mine](https://wiki.factorio.com/Land_mine).
 */
@Serializable
@SerialName("land-mine")
public class LandMinePrototype : EntityWithOwnerPrototype()

/**
 * Abstract class that anything that is a belt or can connect to belts uses.
 */
@Serializable
public sealed class TransportBeltConnectablePrototype : EntityWithOwnerPrototype() {
    /**
     * The speed of the belt: `speed × 480 = x Items/second`.
     *
     * The raw value is expressed as the number of tiles traveled by each item on the belt per tick,
     * relative to the belt's maximum density - e.g. `x items/second ÷ (4 items/lane × 2 lanes/belt ×
     * 60 ticks/second) = <speed> belts/tick` where a "belt" is the size of one tile. See
     * [Transport_belts/Physics](https://wiki.factorio.com/Transport_belts/Physics) for more details.
     *
     * Must be a positive non-infinite number. The number is a fixed point number with 8 bits
     * reserved for decimal precision, meaning the smallest value step is `1/2^8 = 0.00390625`. In the
     * simple case of a non-curved belt, the rate is multiples of `1.875` items/s, even though the
     * entity tooltip may show a different rate.
     */
    public var speed: Double = 0.0
        protected set
}

/**
 * A belt that can be connected to a belt anywhere else, including on a different surface. The
 * linked belts have to be [connected with console
 * commands](https://wiki.factorio.com/Console#Connect_linked_belts) or runtime scripting in mods or
 * scenarios. [LuaEntity::connect_linked_belts](runtime:LuaEntity::connect_linked_belts) and other
 * runtime functions.
 */
@Serializable
@SerialName("linked-belt")
public class LinkedBeltPrototype : TransportBeltConnectablePrototype() {
    public var allow_clone_connection: Boolean? = null
        protected set

    public var allow_blueprint_connection: Boolean? = null
        protected set

    public var allow_side_loading: Boolean? = null
        protected set
}

/**
 * A container that shares its inventory with containers with the same
 * [link_id](runtime:LuaEntity::link_id), which can be set via the GUI. The link IDs are per prototype
 * and force, so only containers with the **same ID**, **same prototype name** and **same force** will
 * share inventories.
 */
@Serializable
@SerialName("linked-container")
public class LinkedContainerPrototype : EntityWithOwnerPrototype() {
    /**
     * Must be > 0.
     */
    public var inventory_size: ItemStackIndex = 0u
        protected set

    /**
     * Whether the inventory of this container can be filtered (like cargo wagons) or not.
     */
    public var inventory_type: InventoryType? = null
        protected set

    /**
     * The maximum circuit wire distance for this linked container.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * Continuously loads and unloads machines, as an alternative to inserters.
 */
@Serializable
public sealed class LoaderPrototype : TransportBeltConnectablePrototype() {
    /**
     * How many item filters this loader has. Maximum count of filtered items in loader is 5.
     */
    public var filter_count: UByte = 0u
        protected set

    public var energy_source: EHFVEnergySource? = null
        protected set
}

/**
 * Continuously loads and unloads machines, as an alternative to inserters.
 *
 * This loader type is identical to [Loader1x2Prototype](prototype:Loader1x2Prototype) with the
 * exception of its hardcoded belt_distance. The belt_distance of the loader determines the distance
 * between the position of this loader and the tile of the loader's belt target.
 *
 * This loader type always has a belt_distance of 0, meaning by default it is 1 tile long in total.
 * For a loader type with a belt_distance of 0.5, see
 * [Loader1x2Prototype](prototype:Loader1x2Prototype).
 */
@Serializable
@SerialName("loader-1x1")
public class Loader1x1Prototype : LoaderPrototype()

/**
 * Continuously loads and unloads machines, as an alternative to inserters.
 *
 * This loader type is identical to [Loader1x1Prototype](prototype:Loader1x1Prototype) with the
 * exception of its hardcoded belt_distance. The belt_distance of the loader determines the distance
 * between the position of this loader and the tile of the loader's belt target.
 *
 * This loader type always has a belt_distance of 0.5, meaning by default it is 2 tiles long in
 * total. For a loader type with a belt_distance of 0, see
 * [Loader1x1Prototype](prototype:Loader1x1Prototype).
 */
@Serializable
@SerialName("loader")
public class Loader1x2Prototype : LoaderPrototype()

/**
 * A [locomotive](https://wiki.factorio.com/Locomotive).
 */
@Serializable
@SerialName("locomotive")
public class LocomotivePrototype : RollingStockPrototype() {
    /**
     * Must be a burner energy source when using "burner", otherwise it can also be a void energy
     * source.
     */
    @JsonNames("burner")
    public lateinit var energy_source: BVEnergySource
        protected set
}

/**
 * A mining drill for automatically extracting resources from [resource
 * entities](prototype:ResourceEntityPrototype). This prototype type is used by [burner mining
 * drill](https://wiki.factorio.com/Burner_mining_drill), [electric mining
 * drill](https://wiki.factorio.com/Electric_mining_drill) and
 * [pumpjack](https://wiki.factorio.com/Pumpjack) in vanilla.
 */
@Serializable
@SerialName("mining-drill")
public class MiningDrillPrototype : EntityWithOwnerPrototype() {
    /**
     * The position where any item results are placed, when the mining drill is facing north
     * (default direction). If the drill does not produce any solid items but uses a fluidbox output
     * instead (e.g. pumpjacks), a vector of `{0,0}` disables the yellow arrow alt-mode indicator for
     * the placed item location.
     */
    public lateinit var vector_to_place_result: Vector
        protected set

    /**
     * The energy source of this mining drill.
     */
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * The names of the [ResourceCategory](prototype:ResourceCategory) that can be mined by this
     * drill. For a list of built-in categories, see
     * [here](https://wiki.factorio.com/Data.raw#resource-category).
     *
     * Note: Categories containing resources which produce items, fluids, or items+fluids may be
     * combined on the same entity, but may not work as expected. Examples: Miner does not rotate
     * fluid-resulting resources until depletion. Fluid isn't output (fluid resource change and
     * fluidbox matches previous fluid). Miner with no `vector_to_place_result` can't output an item
     * result and halts.
     */
    public lateinit var resource_categories: List<ResourceCategoryID>
        protected set

    public var output_fluid_box: FluidBox? = null
        protected set

    /**
     * Sets the [modules](prototype:ModulePrototype) and [beacon](prototype:BeaconPrototype) effects
     * that are allowed to be used on this mining drill.
     */
    public var allowed_effects: EffectTypeLimitation? = null
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set

    /**
     * Productivity bonus that this machine always has. Values below `0` are allowed, however the
     * sum of the resulting effect together with modules and research is limited to be at least 0%, see
     * [Effect](prototype:Effect).
     */
    public var base_productivity: Float? = null
        protected set

    public var module_specification: ModuleSpecification? = null
        protected set
}

/**
 * Exists only for migration, cannot be used by mods.
 */
@Serializable
@SerialName("mining-tool")
public class MiningToolPrototype : ToolPrototype()

/**
 * A [module](https://wiki.factorio.com/Module). They are used to affect the capabilities of
 * existing machines, for example by increasing the crafting speed of a [crafting
 * machine](prototype:CraftingMachinePrototype).
 */
@Serializable
@SerialName("module")
public class ModulePrototype : ItemPrototype() {
    /**
     * Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower
     * tier modules of the same category with higher tier modules.
     */
    public lateinit var category: ModuleCategoryID
        protected set

    /**
     * Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules
     * into an entity and it will replace lower tier modules with higher tier modules if they have the
     * same category.
     */
    public var tier: UInt = 0u
        protected set

    /**
     * The effect of the module on the machine it's inserted in, such as increased pollution.
     */
    public lateinit var effect: Effect
        protected set

    /**
     * Array of [recipe names](prototype:RecipePrototype) this module can be used on. If empty, the
     * module can be used on all recipes.
     */
    public var limitation: List<RecipeID>? = null
        protected set

    /**
     * Array of [recipe names](prototype:RecipePrototype) this module can **not** be used on,
     * implicitly allowing its use on all other recipes. This property has no effect if set to an empty
     * table.
     *
     * Note that the game converts this into a normal list of limitations internally, so reading
     * [LuaItemPrototype::limitations](runtime:LuaItemPrototype::limitations) at runtime will be the
     * product of both ways of defining limitations.
     */
    public var limitation_blacklist: List<RecipeID>? = null
        protected set
}

/**
 * An [offshore pump](https://wiki.factorio.com/Offshore_pump).
 */
@Serializable
@SerialName("offshore-pump")
public class OffshorePumpPrototype : EntityWithOwnerPrototype() {
    public lateinit var fluid_box: FluidBox
        protected set

    /**
     * The name of the fluid that is produced by the pump.
     */
    public lateinit var fluid: FluidID
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A [pipe to ground](https://wiki.factorio.com/Pipe_to_ground).
 */
@Serializable
@SerialName("pipe-to-ground")
public class PipeToGroundPrototype : EntityWithOwnerPrototype() {
    public lateinit var fluid_box: FluidBox
        protected set
}

/**
 * When a character dies, this entity will immediately respawn the character at the entities
 * location, so there is no respawn time. If there are multiple player ports in the world, the
 * character will respawn at the nearest player port to their death location.
 */
@Serializable
@SerialName("player-port")
public class PlayerPortPrototype : EntityWithOwnerPrototype()

/**
 * A [power switch](https://wiki.factorio.com/Power_switch).
 */
@Serializable
@SerialName("power-switch")
public class PowerSwitchPrototype : EntityWithOwnerPrototype()

/**
 * A [programmable speaker](https://wiki.factorio.com/Programmable_speaker).
 */
@Serializable
@SerialName("programmable-speaker")
public class ProgrammableSpeakerPrototype : EntityWithOwnerPrototype() {
    public lateinit var energy_source: EVEnergySource
        protected set

    public var maximum_polyphony: UInt = 0u
        protected set

    public lateinit var instruments: List<ProgrammableSpeakerInstrument>
        protected set

    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * The pump is used to transfer fluids between tanks, fluid wagons and pipes.
 */
@Serializable
@SerialName("pump")
public class PumpPrototype : EntityWithOwnerPrototype() {
    /**
     * The area of the entity where fluid inputs and outputs.
     */
    public lateinit var fluid_box: FluidBox
        protected set

    /**
     * The type of energy the pump uses.
     */
    public lateinit var energy_source: EnergySource
        protected set

    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A [radar](https://wiki.factorio.com/Radar).
 */
@Serializable
@SerialName("radar")
public class RadarPrototype : EntityWithOwnerPrototype() {
    /**
     * The energy source for this radar.
     */
    public lateinit var energy_source: EnergySource
        protected set

    /**
     * The radius of the area this radar can chart, in chunks.
     */
    public var max_distance_of_sector_revealed: UInt = 0u
        protected set

    /**
     * The radius of the area constantly revealed by this radar, in chunks.
     */
    public var max_distance_of_nearby_sector_revealed: UInt = 0u
        protected set
}

/**
 * The abstract base entity for both rail signals.
 */
@Serializable
public sealed class RailSignalBasePrototype : EntityWithOwnerPrototype() {
    public var default_red_output_signal: SignalIDConnector? = null
        protected set

    public var default_orange_output_signal: SignalIDConnector? = null
        protected set

    public var default_green_output_signal: SignalIDConnector? = null
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A [rail chain signal](https://wiki.factorio.com/Rail_chain_signal).
 */
@Serializable
@SerialName("rail-chain-signal")
public class RailChainSignalPrototype : RailSignalBasePrototype() {
    public var default_blue_output_signal: SignalIDConnector? = null
        protected set
}

/**
 * A [rail planner](https://wiki.factorio.com/Rail_planner).
 */
@Serializable
@SerialName("rail-planner")
public class RailPlannerPrototype : ItemPrototype()

/**
 * A [rail signal](https://wiki.factorio.com/Rail_signal).
 */
@Serializable
@SerialName("rail-signal")
public class RailSignalPrototype : RailSignalBasePrototype()

/**
 * A [reactor](https://wiki.factorio.com/Reactor).
 */
@Serializable
@SerialName("reactor")
public class ReactorPrototype : EntityWithOwnerPrototype() {
    /**
     * May not be a heat energy source.
     *
     * The input energy source, in vanilla it is a burner energy source.
     */
    public lateinit var energy_source: EnergySource
        protected set
}

/**
 * A [repair pack](https://wiki.factorio.com/Repair_pack). Using the tool decreases durability to
 * restore entity health.
 */
@Serializable
@SerialName("repair-tool")
public class RepairToolPrototype : ToolPrototype()

/**
 * A [roboport](https://wiki.factorio.com/Roboport).
 */
@Serializable
@SerialName("roboport")
public class RoboportPrototype : EntityWithOwnerPrototype() {
    /**
     * The roboport's energy source.
     */
    public lateinit var energy_source: EVEnergySource
        protected set

    /**
     * Can't be negative.
     */
    public var logistics_radius: Float = 0f
        protected set

    /**
     * Can't be negative.
     */
    public var construction_radius: Float = 0f
        protected set

    public var default_available_logistic_output_signal: SignalIDConnector? = null
        protected set

    public var default_total_logistic_output_signal: SignalIDConnector? = null
        protected set

    public var default_available_construction_output_signal: SignalIDConnector? = null
        protected set

    public var default_total_construction_output_signal: SignalIDConnector? = null
        protected set

    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set

    /**
     * Must be >= `logistics_radius`.
     */
    public var logistics_connection_distance: Float? = null
        protected set
}

/**
 * A [rocket silo](https://wiki.factorio.com/Rocket_silo).
 */
@Serializable
@SerialName("rocket-silo")
public class RocketSiloPrototype : AssemblingMachinePrototype()

/**
 * Has a force, but unlike
 * [SimpleEntityWithForcePrototype](prototype:SimpleEntityWithForcePrototype) it is only attacked if
 * the biters get stuck on it (or if
 * [EntityWithOwnerPrototype::is_military_target](prototype:EntityWithOwnerPrototype::is_military_target)
 * set to true to make the two entity types equivalent).
 *
 * Can be rotated in 4 directions. `picture` can be used to specify different graphics per
 * direction.
 */
@Serializable
@SerialName("simple-entity-with-owner")
public open class SimpleEntityWithOwnerPrototype : EntityWithOwnerPrototype()

/**
 * By default, this entity will be a priority target for units/turrets, who will choose to attack it
 * even if it does not block their path. Setting
 * [EntityWithOwnerPrototype::is_military_target](prototype:EntityWithOwnerPrototype::is_military_target)
 * to `false` will turn this off, which then makes this type equivalent to
 * [SimpleEntityWithOwnerPrototype](prototype:SimpleEntityWithOwnerPrototype).
 */
@Serializable
@SerialName("simple-entity-with-force")
public class SimpleEntityWithForcePrototype : SimpleEntityWithOwnerPrototype()

/**
 * A [solar panel](https://wiki.factorio.com/Solar_panel).
 */
@Serializable
@SerialName("solar-panel")
public class SolarPanelPrototype : EntityWithOwnerPrototype() {
    /**
     * Sets how this solar panel connects to the energy network. The most relevant property seems to
     * be the output_priority.
     */
    public lateinit var energy_source: ElectricEnergySource
        protected set
}

/**
 * The [spidertron remote](https://wiki.factorio.com/Spidertron_remote). This remote can only be
 * connected to entities of type [SpiderVehiclePrototype](prototype:SpiderVehiclePrototype).
 */
@Serializable
@SerialName("spidertron-remote")
public class SpidertronRemotePrototype : ItemPrototype()

/**
 * A [splitter](https://wiki.factorio.com/Splitter).
 */
@Serializable
@SerialName("splitter")
public class SplitterPrototype : TransportBeltConnectablePrototype()

/**
 * A [storage tank](https://wiki.factorio.com/Storage_tank).
 */
@Serializable
@SerialName("storage-tank")
public class StorageTankPrototype : EntityWithOwnerPrototype() {
    public lateinit var fluid_box: FluidBox
        protected set

    public var two_direction_only: Boolean? = null
        protected set

    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A straight rail.
 */
@Serializable
@SerialName("straight-rail")
public class StraightRailPrototype : RailPrototype()

/**
 * A [train stop](https://wiki.factorio.com/Train_stop).
 */
@Serializable
@SerialName("train-stop")
public class TrainStopPrototype : EntityWithOwnerPrototype() {
    public var default_train_stopped_signal: SignalIDConnector? = null
        protected set

    public var default_trains_count_signal: SignalIDConnector? = null
        protected set

    public var default_trains_limit_signal: SignalIDConnector? = null
        protected set

    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * A [transport belt](https://wiki.factorio.com/Transport_belt).
 */
@Serializable
@SerialName("transport-belt")
public class TransportBeltPrototype : TransportBeltConnectablePrototype() {
    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set

    /**
     * The name of the [UndergroundBeltPrototype](prototype:UndergroundBeltPrototype) which is used
     * in quick-replace fashion when the smart belt dragging behavior is triggered.
     */
    public var related_underground_belt: EntityID? = null
        protected set
}

/**
 * An [underground belt](https://wiki.factorio.com/Underground_belt).
 */
@Serializable
@SerialName("underground-belt")
public class UndergroundBeltPrototype : TransportBeltConnectablePrototype() {
    public var max_distance: UByte = 0u
        protected set
}

/**
 * An [upgrade planner](https://wiki.factorio.com/Upgrade_planner).
 */
@Serializable
@SerialName("upgrade-item")
public class UpgradeItemPrototype : SelectionToolPrototype()

/**
 * A [wall](https://wiki.factorio.com/Wall).
 */
@Serializable
@SerialName("wall")
public class WallPrototype : EntityWithOwnerPrototype() {
    /**
     * The maximum circuit wire distance for this entity.
     */
    public var circuit_wire_max_distance: Double? = null
        protected set
}

/**
 * The abstract base of all [EnergySources](prototype:EnergySource). Specifies the way an entity
 * gets its energy.
 */
@Serializable
public sealed class BaseEnergySource

@Serializable
@SerialName("burner")
public data class BurnerEnergySource(
    /**
     * The energy source can be used with fuel from this [fuel category](prototype:FuelCategory).
     * For a list of built-in categories, see [here](https://wiki.factorio.com/Data.raw#fuel-category).
     *
     * Only loaded if `fuel_categories` is not defined.
     */
    public val fuel_category: FuelCategoryID?,
    /**
     * The energy source can be used with fuel from these [fuel categories](prototype:FuelCategory).
     */
    public val fuel_categories: List<FuelCategoryID>?,
) : BaseEnergySource(),
    BVEnergySource

/**
 * Every entry in the array is a specification of one layer the object collides with or a special
 * collision option. Supplying an empty table means that no layers and no collision options are set.
 *
 * The default collision masks of all entity types can be found
 * [here](prototype:EntityPrototype::collision_mask). The base game provides common collision mask
 * functions in a Lua file in the core
 * [lualib](https://github.com/wube/factorio-data/blob/master/core/lualib/collision-mask-util.lua).
 *
 * Supplying an empty array means that no layers and no collision options are set.
 *
 * The three options in addition to the standard layers are not collision masks, instead they
 * control other aspects of collision.
 */
public typealias CollisionMask = List<String>

/**
 * When applied to [modules](prototype:ModulePrototype), the resulting effect is a sum of all module
 * effects, multiplied through calculations: `(1 + sum module effects)` or, for productivity `(0 +
 * sum)`.
 */
@Serializable
public data class Effect(
    /**
     * Multiplier to energy used during operation (not idle/drain use). The minimum possible sum
     * is -80%.
     */
    public val consumption: EffectValue?,
    /**
     * Modifier to crafting speed, research speed, etc. The minimum possible sum is -80%.
     */
    public val speed: EffectValue?,
    /**
     * Multiplied against work completed, adds to the bonus results of operating. E.g. an extra
     * crafted recipe or immediate research bonus. The minimum possible sum is 0%.
     */
    public val productivity: EffectValue?,
    /**
     * Multiplier to the pollution factor of an entity's pollution during use. The minimum possible
     * sum is -80%.
     */
    public val pollution: EffectValue?,
)

@Serializable
public enum class EffectType {
    /**
     * Modules that increase or decrease the machine's speed.
     */
    speed,
    /**
     * Modules that make the machine produce bonus items.
     */
    productivity,
    /**
     * Modules that increase or decrease the machine's energy consumption.
     */
    consumption,
    /**
     * Modules that make the machine produce more or less pollution.
     */
    pollution,
}

/**
 * A list of [module](prototype:ModulePrototype) effects, or just a single effect. Modules with
 * other effects cannot be used on the machine. This means that both effects from modules and from
 * surrounding beacons are restricted to the listed effects. If `allowed_effects` is an empty array,
 * the machine cannot be affected by modules or beacons.
 */
public typealias EffectTypeLimitation = ItemOrArray<EffectType>

@Serializable
public data class EffectValue(
    /**
     * Precision is ignored beyond two decimals - `0.567` results in `0.56` and means 56% etc.
     * Values can range from `-327.68` to `327.67`. Numbers outside of this range will wrap around.
     */
    public val bonus: Double?,
)

@Serializable
@SerialName("electric")
public data object ElectricEnergySource : BaseEnergySource(), EVEnergySource, EHFVEnergySource

/**
 * Loaded as one of the [BaseEnergySource](prototype:BaseEnergySource) extensions, based on the
 * value of the `type` key.
 */
public typealias EnergySource = BaseEnergySource

/**
 * The name of an [EntityPrototype](prototype:EntityPrototype).
 */
public typealias EntityID = String

@Serializable
public enum class EntityPrototypeFlag {
    /**
     * Can't be rotated before or after placing.
     */
    `not-rotatable`,
    /**
     * Determines the default force when placing entities in the map editor and using the *AUTO*
     * option for the force.
     */
    `placeable-neutral`,
    /**
     * Determines the default force when placing entities in the map editor and using the *AUTO*
     * option for the force.
     */
    `placeable-player`,
    /**
     * Determines the default force when placing entities in the map editor and using the *AUTO*
     * option for the force.
     */
    `placeable-enemy`,
    /**
     * Refers to the fact that most entities are placed on an invisible 'grid' within the world,
     * entities with this flag do not have to line up with this grid (like trees and land-mines).
     */
    `placeable-off-grid`,
    /**
     * Makes it possible for the biter AI to target the entity as a distraction in distraction mode
     * [by_anything](runtime:defines.distraction.by_anything). Makes it possible to blueprint,
     * deconstruct, and repair the entity (can be turned off again using the specific flags). Enables
     * smoke to be created automatically when building the entity. If the entity does not have
     * [EntityPrototype::map_color](prototype:EntityPrototype::map_color) set, this flag makes the
     * entity appear on the map/minimap with the default color specified in the
     * [UtilityConstants](prototype:UtilityConstants).
     */
    `player-creation`,
    /**
     * Uses 45 degree angle increments when selecting direction.
     */
    `building-direction-8-way`,
    /**
     * Used to automatically detect the proper direction, if possible. Used by base with the pump,
     * train stop, and train signal.
     */
    `filter-directions`,
    /**
     * Fast replace will not apply when building while moving.
     */
    `fast-replaceable-no-build-while-moving`,
    /**
     * This is used to specify that the entity breathes air, and so is affected by poison (currently
     * [poison capsules](https://wiki.factorio.com/Poison_capsule) are the only source).
     */
    `breaths-air`,
    /**
     * Used to specify that the entity can not be 'healed' by repair-packs (or construction robots
     * with repair packs)
     */
    `not-repairable`,
    /**
     * The entity does not get drawn on the map.
     */
    `not-on-map`,
    /**
     * The entity can not be deconstructed.
     */
    `not-deconstructable`,
    /**
     * The entity can not be used in blueprints.
     */
    `not-blueprintable`,
    /**
     * Hides the entity from the bonus GUI (button above the map) and from the made in property of
     * recipe tooltips.
     */
    hidden,
    /**
     * Hides the alt-info of an entity in alt-mode, for example the recipe icon.
     */
    `hide-alt-info`,
    /**
     * Do not fast replace over other entity types when building while moving.
     */
    `fast-replaceable-no-cross-type-while-moving`,
    `no-gap-fill-while-building`,
    /**
     * Do not apply fire stickers to the entity.
     */
    `not-flammable`,
    /**
     * Prevents inserters and loaders from taking items from this entity.
     */
    `no-automated-item-removal`,
    /**
     * Prevents inserters and loaders from inserting items into this entity.
     */
    `no-automated-item-insertion`,
    /**
     * This flag does nothing when set in the data stage because it gets overridden by
     * [EntityPrototype::allow_copy_paste](prototype:EntityPrototype::allow_copy_paste). Thus, it must
     * be set on the entity via that property.
     */
    `no-copy-paste`,
    /**
     * Disallows selection of the entity even when a selection box is specified for other reasons.
     * For example, selection boxes are used to determine the size of outlines to be shown when
     * highlighting entities inside electric pole ranges. This flag does nothing when set in the data
     * stage because it gets overridden by
     * [EntityPrototype::selectable_in_game](prototype:EntityPrototype::selectable_in_game). Thus, it
     * must be set on the entity via that property.
     */
    `not-selectable-in-game`,
    /**
     * The entity can't be selected by the [upgrade
     * planner](https://wiki.factorio.com/Upgrade_planner).
     */
    `not-upgradable`,
    /**
     * The entity is not shown in the kill statistics.
     */
    `not-in-kill-statistics`,
    /**
     * The entity is not shown in the made in property of recipe tooltips.
     */
    `not-in-made-in`,
}

/**
 * An array containing the following values.
 *
 * If an entity is a [building](runtime:LuaEntityPrototype::is_building) and has the
 * `"player-creation"` flag set, it is considered for multiple enemy/unit behaviors:
 *
 * - Autonomous enemy attacks (usually triggered by pollution) can only attack within chunks that
 * contain at least one entity that is both a building and a player-creation.
 *
 * - Enemy expansion considers entities that are both buildings and player-creations as "enemy"
 * entities that may block expansion.
 */
public typealias EntityPrototypeFlags = List<EntityPrototypeFlag>

/**
 * Used to set the fluid amount an entity can hold, as well as the connection points for pipes
 * leading into and out of the entity.
 *
 * Entities can have multiple fluidboxes. These can be part of a
 * [FluidEnergySource](prototype:FluidEnergySource), or be specified directly in the entity prototype.
 *
 * A fluidbox can store only one type of fluid at a time. However, a fluid system (ie. multiple
 * connected fluid boxes) can contain multiple different fluids, see [Fluid
 * mixing](https://wiki.factorio.com/Fluid_system#Fluid_mixing).
 */
@Serializable
public data class FluidBox(
    /**
     * Connection points to connect to other fluidboxes. This is also marked as blue arrows in alt
     * mode. Fluid may flow in or out depending on the `type` field of each connection.
     *
     * Connection points may depend on the direction the entity is facing. These connection points
     * cannot share positions with one another or the connection points of another fluid box belonging
     * to the same entity.
     *
     * Can't have more than 255 connections.
     */
    public val pipe_connections: List<PipeConnectionDefinition>,
    /**
     * Can be used to specify which fluid is allowed to enter this fluid box. See
     * [here](https://forums.factorio.com/viewtopic.php?f=28&t=46302).
     */
    public val filter: FluidID?,
    public val production_type: ProductionType?,
)

@Serializable
@SerialName("fluid")
public data class FluidEnergySource(
    /**
     * All standard fluid box configurations are acceptable, but the type must be `"input"` or
     * `"input-output"` to function correctly. `scale_fluid_usage = true`, `fluid_usage_per_tick`, or a
     * filter on the fluidbox must be set to be able to calculate the fluid usage of the energy source.
     */
    public val fluid_box: FluidBox,
) : BaseEnergySource(),
    EHFVEnergySource

/**
 * The name of a [FluidPrototype](prototype:FluidPrototype).
 */
public typealias FluidID = String

/**
 * The name of a [FuelCategory](prototype:FuelCategory).
 */
public typealias FuelCategoryID = String

/**
 * Defines the connections for [HeatEnergySource](prototype:HeatEnergySource) and
 * [HeatBuffer](prototype:HeatBuffer).
 */
@Serializable
public data class HeatConnection(
    /**
     * The location of the heat pipe connection, relative to the center of the entity in the
     * north-facing direction.
     */
    public val position: MapPosition,
    /**
     * The "outward" direction of this heat connection. For a connection to succeed, the other heat
     * connection must face the opposite direction (a south-facing connection needs a north-facing
     * connection to succeed). A connection rotates with the entity.
     */
    public val direction: Direction,
)

@Serializable
@SerialName("heat")
public data class HeatEnergySource(
    /**
     * May contain up to 32 connections.
     */
    public val connections: List<HeatConnection>?,
) : BaseEnergySource(),
    EHFVEnergySource

public typealias ItemCountType = UInt

/**
 * The name of an [ItemPrototype](prototype:ItemPrototype).
 */
public typealias ItemID = String

@Serializable
public enum class ItemPrototypeFlag {
    /**
     * Whether the logistics areas of roboports should be drawn when holding this item. Used for
     * example by the [deconstruction planner](https://wiki.factorio.com/Deconstruction_planner).
     */
    `draw-logistic-overlay`,
    /**
     * Item will not appear in lists of all items such as those for logistics requests, filters,
     * etc.
     */
    hidden,
    /**
     * Always show the item in selection lists (item filter, logistic request etc.) even when locked
     * recipe for that item is present.
     */
    `always-show`,
    /**
     * Item will not appear in the bonus gui.
     */
    `hide-from-bonus-gui`,
    /**
     * Item will not appear in the tooltips shown when hovering over a burner inventory with the
     * fuel category the item is in.
     */
    `hide-from-fuel-tooltip`,
    /**
     * The item can never be stacked. Additionally, the item does not show an item count when in the
     * cursor. This also prevents the item from stacking in assembling machine input slots, which
     * otherwise can exceed the item stack size if required by the recipe.
     */
    `not-stackable`,
    /**
     * Must be set on [ItemWithInventoryPrototype](prototype:ItemWithInventoryPrototype) when the
     * item should act as an extension to the inventory that it is placed in. Does nothing for other
     * item types.
     */
    `can-extend-inventory`,
    /**
     * Item will be preferred by construction bots when building the entity specified by the item's
     * [place_result](prototype:ItemPrototype::place_result).
     */
    `primary-place-result`,
    /**
     * Only works for [SelectionToolPrototype](prototype:SelectionToolPrototype) and derived
     * classes. Corresponds to the runtime [on_mod_item_opened](runtime:on_mod_item_opened) event.
     */
    `mod-openable`,
    /**
     * Item is deleted when removed from the cursor by pressing `Q` ("clear cursor"). Used for
     * example by the copy/paste tools.
     */
    `only-in-cursor`,
    /**
     * Item is able to be spawned by a [ShortcutPrototype](prototype:ShortcutPrototype) or
     * [CustomInputPrototype](prototype:CustomInputPrototype).
     */
    spawnable,
}

/**
 * An array containing the following values.
 */
public typealias ItemPrototypeFlags = List<ItemPrototypeFlag>

public typealias ItemStackIndex = UShort

/**
 * Item that when placed creates this entity/tile.
 */
@Serializable
public data class ItemToPlace(
    /**
     * The item used to place this entity/tile.
     */
    public val item: ItemID,
    /**
     * How many items are used to place one of this entity/tile. Can't be larger than the stack size
     * of the item.
     */
    public val count: UInt,
)

/**
 * Coordinates of a tile in a map. Positive x goes towards east, positive y goes towards south, and
 * x is the first dimension in the array format.
 *
 * The coordinates are saved as a fixed-size 32 bit integer, with 8 bits reserved for decimal
 * precision, meaning the smallest value step is `1/2^8 = 0.00390625` tiles.
 */
public typealias MapPosition = Position

/**
 * The name of a [ModuleCategory](prototype:ModuleCategory).
 */
public typealias ModuleCategoryID = String

/**
 * The number of module slots in this entity, and their icon positions.
 */
@Serializable
public data class ModuleSpecification(
    /**
     * The number of module slots in this entity.
     */
    public val module_slots: ItemStackIndex?,
)

@Serializable
public enum class InputOutputType {
    input,
    `input-output`,
    output,
}

@Serializable
public data class PipeConnectionDefinition(
    /**
     * Where pipes can connect to this fluidbox regardless the directions of entity.
     */
    public val position: Vector?,
    /**
     * Only loaded, and mandatory if `position` is not defined.
     *
     * Where pipes can connect to this fluidbox, depending on the entity direction.
     *
     * Table must have 4 members, which are 4 explicit positions corresponding to the 4 directions
     * of entity. Positions must correspond to directions going one after another.
     */
    public val positions: List<Vector>?,
    /**
     * `0` means not underground.
     */
    public val max_underground_distance: UInt?,
    public val type: InputOutputType?,
)

@Serializable
public enum class ProductionType {
    None,
    none,
    input,
    `input-output`,
    output,
}

@Serializable
public data class ProgrammableSpeakerInstrument(
    public val name: String,
    public val notes: List<ProgrammableSpeakerNote>,
)

@Serializable
public data class ProgrammableSpeakerNote(
    public val name: String,
)

/**
 * The name of a [RecipeCategory](prototype:RecipeCategory).
 */
public typealias RecipeCategoryID = String

/**
 * The name of a [RecipePrototype](prototype:RecipePrototype).
 */
public typealias RecipeID = String

/**
 * The name of a [ResourceCategory](prototype:ResourceCategory).
 */
public typealias ResourceCategoryID = String

@Serializable
public enum class SignalType {
    virtual,
    item,
    fluid,
}

@Serializable
public data class SignalIDConnector(
    public val type: SignalType,
    /**
     * Name of the signal that shows this color.
     */
    public val name: String,
)

/**
 * A vector is a two-element array or dictionary containing the x and y components. Positive x goes
 * east, positive y goes south.
 */
public typealias Vector = Position

/**
 * Void energy sources provide unlimited free energy.
 */
@Serializable
@SerialName("void")
public data object VoidEnergySource : BaseEnergySource(), EVEnergySource, BVEnergySource,
        EHFVEnergySource

@Serializable
public sealed interface EVEnergySource

@Serializable
public sealed interface BVEnergySource

@Serializable
public sealed interface EHFVEnergySource

/**
 * Models [data.raw](https://wiki.factorio.com/Data.raw). This only contains a subset of objects and
 * properties this library uses, which includes blueprintable entities and items. Other prototypes are
 * ignored.
 */
@Serializable
public class DataRaw(
    public val accumulator: Map<String, AccumulatorPrototype> = emptyMap(),
    public val `artillery-turret`: Map<String, ArtilleryTurretPrototype> = emptyMap(),
    public val beacon: Map<String, BeaconPrototype> = emptyMap(),
    public val boiler: Map<String, BoilerPrototype> = emptyMap(),
    public val `burner-generator`: Map<String, BurnerGeneratorPrototype> = emptyMap(),
    public val `arithmetic-combinator`: Map<String, ArithmeticCombinatorPrototype> = emptyMap(),
    public val `decider-combinator`: Map<String, DeciderCombinatorPrototype> = emptyMap(),
    public val `constant-combinator`: Map<String, ConstantCombinatorPrototype> = emptyMap(),
    public val container: Map<String, ContainerPrototype> = emptyMap(),
    public val `logistic-container`: Map<String, LogisticContainerPrototype> = emptyMap(),
    public val `infinity-container`: Map<String, InfinityContainerPrototype> = emptyMap(),
    public val `assembling-machine`: Map<String, AssemblingMachinePrototype> = emptyMap(),
    public val `rocket-silo`: Map<String, RocketSiloPrototype> = emptyMap(),
    public val furnace: Map<String, FurnacePrototype> = emptyMap(),
    public val `electric-energy-interface`: Map<String, ElectricEnergyInterfacePrototype> =
            emptyMap(),
    public val `electric-pole`: Map<String, ElectricPolePrototype> = emptyMap(),
    public val gate: Map<String, GatePrototype> = emptyMap(),
    public val generator: Map<String, GeneratorPrototype> = emptyMap(),
    public val `heat-interface`: Map<String, HeatInterfacePrototype> = emptyMap(),
    public val `heat-pipe`: Map<String, HeatPipePrototype> = emptyMap(),
    public val inserter: Map<String, InserterPrototype> = emptyMap(),
    public val lab: Map<String, LabPrototype> = emptyMap(),
    public val lamp: Map<String, LampPrototype> = emptyMap(),
    public val `land-mine`: Map<String, LandMinePrototype> = emptyMap(),
    public val `linked-container`: Map<String, LinkedContainerPrototype> = emptyMap(),
    public val `mining-drill`: Map<String, MiningDrillPrototype> = emptyMap(),
    public val `offshore-pump`: Map<String, OffshorePumpPrototype> = emptyMap(),
    public val pipe: Map<String, PipePrototype> = emptyMap(),
    public val `infinity-pipe`: Map<String, InfinityPipePrototype> = emptyMap(),
    public val `pipe-to-ground`: Map<String, PipeToGroundPrototype> = emptyMap(),
    public val `player-port`: Map<String, PlayerPortPrototype> = emptyMap(),
    public val `power-switch`: Map<String, PowerSwitchPrototype> = emptyMap(),
    public val `programmable-speaker`: Map<String, ProgrammableSpeakerPrototype> = emptyMap(),
    public val pump: Map<String, PumpPrototype> = emptyMap(),
    public val radar: Map<String, RadarPrototype> = emptyMap(),
    public val `straight-rail`: Map<String, StraightRailPrototype> = emptyMap(),
    public val `curved-rail`: Map<String, CurvedRailPrototype> = emptyMap(),
    public val `rail-chain-signal`: Map<String, RailChainSignalPrototype> = emptyMap(),
    public val `rail-signal`: Map<String, RailSignalPrototype> = emptyMap(),
    public val reactor: Map<String, ReactorPrototype> = emptyMap(),
    public val roboport: Map<String, RoboportPrototype> = emptyMap(),
    public val `simple-entity-with-owner`: Map<String, SimpleEntityWithOwnerPrototype> = emptyMap(),
    public val `simple-entity-with-force`: Map<String, SimpleEntityWithForcePrototype> = emptyMap(),
    public val `solar-panel`: Map<String, SolarPanelPrototype> = emptyMap(),
    public val `storage-tank`: Map<String, StorageTankPrototype> = emptyMap(),
    public val `train-stop`: Map<String, TrainStopPrototype> = emptyMap(),
    public val `linked-belt`: Map<String, LinkedBeltPrototype> = emptyMap(),
    public val `loader-1x1`: Map<String, Loader1x1Prototype> = emptyMap(),
    public val loader: Map<String, Loader1x2Prototype> = emptyMap(),
    public val splitter: Map<String, SplitterPrototype> = emptyMap(),
    public val `transport-belt`: Map<String, TransportBeltPrototype> = emptyMap(),
    public val `underground-belt`: Map<String, UndergroundBeltPrototype> = emptyMap(),
    public val turret: Map<String, TurretPrototype> = emptyMap(),
    public val `ammo-turret`: Map<String, AmmoTurretPrototype> = emptyMap(),
    public val `electric-turret`: Map<String, ElectricTurretPrototype> = emptyMap(),
    public val `fluid-turret`: Map<String, FluidTurretPrototype> = emptyMap(),
    public val `artillery-wagon`: Map<String, ArtilleryWagonPrototype> = emptyMap(),
    public val `cargo-wagon`: Map<String, CargoWagonPrototype> = emptyMap(),
    public val `fluid-wagon`: Map<String, FluidWagonPrototype> = emptyMap(),
    public val locomotive: Map<String, LocomotivePrototype> = emptyMap(),
    public val wall: Map<String, WallPrototype> = emptyMap(),
    public val item: Map<String, ItemPrototype> = emptyMap(),
    public val module: Map<String, ModulePrototype> = emptyMap(),
    public val ammo: Map<String, AmmoItemPrototype> = emptyMap(),
    public val armor: Map<String, ArmorPrototype> = emptyMap(),
    public val `blueprint-book`: Map<String, BlueprintBookPrototype> = emptyMap(),
    public val blueprint: Map<String, BlueprintItemPrototype> = emptyMap(),
    public val capsule: Map<String, CapsulePrototype> = emptyMap(),
    public val `copy-paste-tool`: Map<String, CopyPasteToolPrototype> = emptyMap(),
    public val `deconstruction-item`: Map<String, DeconstructionItemPrototype> = emptyMap(),
    public val gun: Map<String, GunPrototype> = emptyMap(),
    public val `item-with-entity-data`: Map<String, ItemWithEntityDataPrototype> = emptyMap(),
    public val `item-with-inventory`: Map<String, ItemWithInventoryPrototype> = emptyMap(),
    public val `item-with-label`: Map<String, ItemWithLabelPrototype> = emptyMap(),
    public val `item-with-tags`: Map<String, ItemWithTagsPrototype> = emptyMap(),
    public val `mining-tool`: Map<String, MiningToolPrototype> = emptyMap(),
    public val `rail-planner`: Map<String, RailPlannerPrototype> = emptyMap(),
    public val `repair-tool`: Map<String, RepairToolPrototype> = emptyMap(),
    public val `selection-tool`: Map<String, SelectionToolPrototype> = emptyMap(),
    public val `spidertron-remote`: Map<String, SpidertronRemotePrototype> = emptyMap(),
    public val tool: Map<String, ToolPrototype> = emptyMap(),
    public val `upgrade-item`: Map<String, UpgradeItemPrototype> = emptyMap(),
)

/**
 * All prototypes that are subclasses of ItemPrototype.
 */
public fun DataRaw.allItemPrototypes(): List<ItemPrototype> = listOf(
    ammo,
    armor,
    `blueprint-book`,
    blueprint,
    capsule,
    `copy-paste-tool`,
    `deconstruction-item`,
    gun,
    item,
    `item-with-entity-data`,
    `item-with-inventory`,
    `item-with-label`,
    `item-with-tags`,
    `mining-tool`,
    module,
    `rail-planner`,
    `repair-tool`,
    `selection-tool`,
    `spidertron-remote`,
    tool,
    `upgrade-item`,
).flatMap { it.values }

/**
 * All prototypes that are subclasses of EntityWithOwnerPrototype.
 */
public fun DataRaw.allEntityWithOwnerPrototypes(): List<EntityWithOwnerPrototype> = listOf(
    accumulator,
    `ammo-turret`,
    `arithmetic-combinator`,
    `artillery-turret`,
    `artillery-wagon`,
    `assembling-machine`,
    beacon,
    boiler,
    `burner-generator`,
    `cargo-wagon`,
    `constant-combinator`,
    container,
    `curved-rail`,
    `decider-combinator`,
    `electric-energy-interface`,
    `electric-pole`,
    `electric-turret`,
    `fluid-turret`,
    `fluid-wagon`,
    furnace,
    gate,
    generator,
    `heat-interface`,
    `heat-pipe`,
    `infinity-container`,
    `infinity-pipe`,
    inserter,
    lab,
    lamp,
    `land-mine`,
    `linked-belt`,
    `linked-container`,
    `loader-1x1`,
    loader,
    locomotive,
    `logistic-container`,
    `mining-drill`,
    `offshore-pump`,
    pipe,
    `pipe-to-ground`,
    `player-port`,
    `power-switch`,
    `programmable-speaker`,
    pump,
    radar,
    `rail-chain-signal`,
    `rail-signal`,
    reactor,
    roboport,
    `rocket-silo`,
    `simple-entity-with-force`,
    `simple-entity-with-owner`,
    `solar-panel`,
    splitter,
    `storage-tank`,
    `straight-rail`,
    `train-stop`,
    `transport-belt`,
    turret,
    `underground-belt`,
    wall,
).flatMap { it.values }
