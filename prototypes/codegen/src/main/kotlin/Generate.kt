package glassbricks.factorio

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.UseSerializers
import kotlinx.serialization.json.JsonNames
import kotlinx.serialization.json.booleanOrNull
import kotlinx.serialization.json.doubleOrNull

const val PACKAGE_NAME = "glassbricks.factorio.blueprint.prototypes"
const val PAR_PACKAGE_NAME = "glassbricks.factorio.blueprint"


@OptIn(ExperimentalSerializationApi::class)
class PrototypeDeclarationsGenerator(private val input: GeneratedPrototypes) {
    private val file = FileSpec.builder(PACKAGE_NAME, "Prototypes")
    private val builtins get() = input.builtins
    private val predefined get() = input.predefined

    private val hasInheritors = mutableSetOf<String>()
    private val extraSealedSupertypes =
        input.extraSealedIntfs
            .flatMap { it.subtypes.map { subType -> subType to it.name } }
            .groupBy({ it.first }, { it.second })

    fun generate(): FileSpec {
        findInheritors()
        findEnumConcepts()

        setupFile()
        generatePrototypes()
        generateConcepts()
        generateExtraSealedIntfs()
        generateDataRaw()

        return file.build()
    }


    private fun setupFile() = file.apply {
        indent("    ")
        addFileComment("Generated by prototype-codegen")
        addAnnotation(
            AnnotationSpec.builder(Suppress::class.asClassName())
                .addMember("%S", "EnumEntryName")
                .addMember("%S", "PropertyName")
                .build()
        )
        addAnnotation(
            AnnotationSpec.builder(UseSerializers::class)
                .addMember("PositionShorthandSerializer::class")
                .addMember("BoundingBoxShorthandSerializer::class")
                .addMember("LuaListSerializer::class")
                .build()
        )
        addAnnotation(
            AnnotationSpec.builder(ClassName("kotlin", "OptIn"))
                .addMember("%T::class", ClassName("kotlinx.serialization", "ExperimentalSerializationApi"))
                .build()
        )
        addKotlinDefaultImports()
    }

    private fun findInheritors() {
        for (prototype in input.prototypes.values + input.concepts.values) {
            val parent = prototype.inner.parent
            if (parent != null) {
                hasInheritors.add(parent)
            }
        }
    }

    private val enumTypes = mutableSetOf<String>()
    private fun findEnumConcepts() {
        for ((_, concept) in input.concepts) {
            if (concept.inner.type is UnionType) {
                val options = tryGetEnumOptions(concept.inner.type)
                if (options != null) {
                    enumTypes += concept.inner.name
                }
            }
        }
    }


    private fun generatePrototypes(): MutableSet<String> {
        val alreadyGenerated = mutableSetOf<String>()
        fun visitPrototype(prototype: GeneratedPrototype) {
            if (prototype.inner.name in alreadyGenerated) return
            alreadyGenerated.add(prototype.inner.name)

            val parent = prototype.inner.parent
            if (parent != null) {
                val parentPrototype = input.prototypes[parent] ?: error("Parent prototype not found: $parent")
                visitPrototype(parentPrototype)
            }
            file.addType(generatePrototype(prototype))
        }

        for (prototype in input.prototypes.values.sortedBy { it.inner.order }) {
            visitPrototype(prototype)
        }
        return alreadyGenerated
    }

    private fun generateConcepts() {
        val alreadyGenerated = mutableSetOf<String>()

        fun visitConcept(concept: GeneratedConcept) {
            if (concept.inner.name in alreadyGenerated) return
            alreadyGenerated.add(concept.inner.name)

            val parent = concept.inner.parent
            if (parent != null && parent != "BaseEnergySource") {
                val parentConcept = input.concepts[parent] ?: error("Parent concept not found: $parent")
                visitConcept(parentConcept)
            }

            val type = generateConcept(concept)
            if (type is TypeAliasSpec) {
                file.addTypeAlias(type)
            } else if (type is TypeSpec) {
                file.addType(type)
            }
        }

        for (concept in input.concepts.values.sortedBy { it.inner.order }) {
            visitConcept(concept)
        }
    }

    private fun generateExtraSealedIntfs() {
        for (intf in input.extraSealedIntfs) {
            val type = TypeSpec.interfaceBuilder(intf.name).apply {
                addAnnotation(Serializable::class)
                addModifiers(KModifier.SEALED)
                for (supertype in intf.superTypes) {
                    addSuperinterface(ClassName(PACKAGE_NAME, supertype))
                }
                intf.modify?.invoke(this)
            }.build()
            file.addType(type)
        }
    }

    private fun generateDataRaw() {
        val allPrototypes = TypeSpec.classBuilder("DataRaw").apply {
            addKdoc(
                "Models [data.raw](https://wiki.factorio.com/Data.raw). " +
                        "This only contains a subset of objects and properties this library uses, " +
                        "which includes blueprintable entities and items. Other prototypes are ignored."
            )
            addAnnotation(Serializable::class)

            val constructorBuilder = FunSpec.constructorBuilder()
            for (prototype in input.prototypes.values) {
                val typeName = prototype.inner.typename ?: continue
                val mapType = Map::class.asClassName().parameterizedBy(
                    String::class.asClassName(),
                    ClassName(PACKAGE_NAME, prototype.inner.name)
                )
                addProperty(
                    PropertySpec.builder(typeName, mapType)
                        .initializer(typeName)
                        .build()
                )
                constructorBuilder.addParameter(
                    ParameterSpec.builder(typeName, mapType)
                        .defaultValue("emptyMap()")
                        .build()
                )
            }

            primaryConstructor(constructorBuilder.build())
        }.build()

        file.addType(allPrototypes)

        generateAllSubclassGetters()
    }

    private fun generateAllSubclassGetters() {
        for (baseProtoName in input.allSubclassGetters) {
            input.prototypes[baseProtoName] ?: error("Base prototype not found: $baseProtoName")
            val subclasses = getAllPrototypeSubclasses(input.prototypes.mapValues { it.value.inner }, baseProtoName)
                .filter { it.typename != null }
                .sortedBy { it.order }
                .map { it.typename!! }
            // fun DataRaw.all(BasePrototypes)s(): List<BaseClass> = listOf(
            //      `typename`,*
            // ).flatMap { it.values }
            val function = FunSpec.builder("all${baseProtoName}s").apply {
                addKdoc("All prototypes that are subclasses of $baseProtoName.")
                receiver(ClassName(PACKAGE_NAME, "DataRaw"))
                returns(List::class.asClassName().parameterizedBy(ClassName(PACKAGE_NAME, baseProtoName)))
                addCode(buildCodeBlock {
                    add("return listOf(\n")
                    withIndent {
                        for (subclass in subclasses) {
                            add("%N,\n", subclass)
                        }
                    }
                    add(").flatMap { it.values }")
                })
            }.build()
            file.addFunction(function)
        }
    }


    private fun generatePrototype(prototype: GeneratedPrototype): TypeSpec =
        generateClass(prototype, prototype.inner.name)

    private fun generateClass(
        value: GeneratedValue,
        name: String,
        isDataClass: Boolean = false
    ): TypeSpec {
        val canBeObject =
            value.includedProperties.isEmpty()
                    && value.typeName != null
                    && value.inner.name !in hasInheritors
                    && value.inner.parent.let {
                it == "BaseEnergySource"
            }

        val builder = if (canBeObject) {
            TypeSpec.objectBuilder(name)
        } else {
            TypeSpec.classBuilder(name)
        }
        return builder.apply {
            // doc
            addDescription(value.inner.description)

            // annotations
            addAnnotation(Serializable::class)
            val typeName = value.typeName
            if (typeName != null) {
                addAnnotation(
                    AnnotationSpec.builder(SerialName::class)
                        .addMember("%S", typeName)
                        .build()
                )
            }

            // modifiers
            if (isDataClass) {
                addModifiers(KModifier.DATA)
            }

            val hasInheritors = value.inner.name in hasInheritors
            if (hasInheritors) {
                check(!isDataClass)
                if (value.inner.abstract) {
                    addModifiers(KModifier.SEALED)
                } else {
                    addModifiers(KModifier.OPEN)
                }
            }
            if (value.inner.abstract) check(hasInheritors)

            // supertypes
            val parent = value.inner.parent
            if (parent != null) {
                if (parent == "BaseEnergySource") {
                    addSuperinterface(ClassName(PACKAGE_NAME, "EnergySource"))
                } else {
                    check(parent in input.prototypes || parent in input.concepts) {
                        "Parent prototype not found: $parent"
                    }
                    superclass(ClassName(PACKAGE_NAME, parent))
                }
            }
            val extraSealedIntfs = extraSealedSupertypes[value.inner.name]
            if (extraSealedIntfs != null) {
                for (extra in extraSealedIntfs) {
                    addSuperinterface(ClassName(PACKAGE_NAME, extra))
                }
            }

            // properties
            if (isDataClass) {
                val constructorBuilder = FunSpec.constructorBuilder()
                for (property in value.includedProperties.values.sortedBy { it.inner.order }) {
                    val (propertySpec, defaultValue) = generateProperty(value, property, initByMutate = false) {
                        initializer(property.inner.name)
                    }
                    addProperty(propertySpec)
                    constructorBuilder.addParameter(
                        ParameterSpec.builder(propertySpec.name, propertySpec.type)
                            .defaultValue(defaultValue)
                            .build()
                    )
                }
                if (constructorBuilder.parameters.isNotEmpty())
                    primaryConstructor(constructorBuilder.build())
            } else {
                for (property in value.includedProperties.values.sortedBy { it.inner.order }) {
                    addProperty(generateProperty(value, property, initByMutate = true).first)
                }
            }

            value.modify?.invoke(this)
        }.build()
    }

    private fun Concept.canBeDataClass(): Boolean =
        !properties.isNullOrEmpty() && name !in hasInheritors

    private fun generateStructConcept(
        concept: GeneratedConcept,
        name: String,
    ): TypeSpec {
        return generateClass(concept, name, isDataClass = concept.inner.canBeDataClass())
    }

    private fun generateConcept(concept: GeneratedConcept): Any {
        val type = if (concept.overrideType != null) {
            val (type, declaration) = concept.overrideType.invoke()
            GeneratedType(type, declaration)
        } else {
            mapTypeDefinition(concept.inner.type, concept, null, true)
        }
        return type.declaration
            ?: TypeAliasSpec.builder(concept.inner.name, type.putType()).apply {
                addDescription(concept.inner.description)
            }.build()
    }

    /**
     * Gets the name of the builtin type, if it is a builtin type.
     * Follows concepts which are only type aliases.
     */
    private tailrec fun TypeDefinition.getBuiltinType(): String? {
        val type = (innerType() as? BasicType)?.value ?: return null
        if (type in builtins) return type
        val concept = input.concepts[type] ?: return null
        return concept.inner.type.getBuiltinType()
    }

    private fun getDefaultValue(property: Property, type: TypeName): CodeBlock? {
        return when (val default = property.default) {
            is ManualDefault -> default.value
            is LiteralDefault -> {
                val value = default.value
                if (value.isString) {
                    if (type is ClassName && type.simpleName in enumTypes) {
                        // enumType.value
                        CodeBlock.of("%T.%N", type, value.content)
                    } else {
                        CodeBlock.of("%S", value.content)
                    }
                } else {
                    val builtinType = property.type.getBuiltinType()
                    value.booleanOrNull?.let {
                        require(builtinType == "bool")
                        CodeBlock.of("%L", it)
                    } ?: value.doubleOrNull?.let {
                        when {
                            builtinType == null -> error("Got numeric default for non-numeric type")
                            builtinType == "double" -> CodeBlock.of("%L", it)
                            builtinType == "float" -> CodeBlock.of("%Lf", it.toFloat().toString())
                            builtinType.contains("uint") -> CodeBlock.of("%Lu", it.toULong())
                            builtinType.contains("int") -> CodeBlock.of("%L", it.toLong())
                            else -> error("Unhandled builtin type: $builtinType")
                        }
                    }
                    ?: error("Unhandled literal type: $value")
                }
            }

            else -> null
        }
    }

    private fun getPlaceholderValue(property: Property): CodeBlock? {
        val builtinType = property.type.getBuiltinType()
        return when {
            builtinType == null -> null
            builtinType == "double" -> CodeBlock.of("0.0")
            builtinType == "float" -> CodeBlock.of("0f")
            builtinType == "bool" -> CodeBlock.of("false")
            builtinType.contains("uint") -> CodeBlock.of("0u")
            builtinType.contains("int") -> CodeBlock.of("0")
            else -> null
        }?.let {
            CodeBlock.of("required(%L)", it)
        }
    }

    private fun generateProperty(
        context: GeneratedValue,
        genProperty: PropertyOptions,
        initByMutate: Boolean,
        block: PropertySpec.Builder.() -> Unit = {}
    ): Pair<PropertySpec, CodeBlock?> {
        val property = genProperty.inner

        val basicType =
            genProperty.overrideType ?: mapTypeDefinition(property.type, context, genProperty, true).putType()
        val defaultValue = getDefaultValue(property, basicType)
        val type =
            basicType.copy(nullable = property.optional && defaultValue == null)

        val propertySpec = PropertySpec.builder(property.name, type).apply {
            addDescription(property.description)
            if (property.alt_name != null) {
                addAnnotation(
                    AnnotationSpec.builder(JsonNames::class)
                        .addMember("%S", property.alt_name)
                        .build()
                )
            }

            if (initByMutate) {
                mutable()
                if (defaultValue != null) {
                    initializer(defaultValue)
                } else if (property.optional) {
                    initializer("null")
                } else {
                    val placeholderValue = getPlaceholderValue(property)
                    if (placeholderValue != null) {
                        initializer(placeholderValue)
                    } else {
                        addModifiers(KModifier.LATEINIT)
                    }
                }
                setter(FunSpec.setterBuilder().addModifiers(KModifier.PROTECTED).build())
            }

            block()
            genProperty.modify?.invoke(this)
        }.build()
        return propertySpec to defaultValue
    }


    private fun tryGetEnumOptions(type: TypeDefinition): List<LiteralType>? =
        if (type is UnionType && type.options.all { it is LiteralType && it.value.isString }) {
            @Suppress("UNCHECKED_CAST")
            type.options as List<LiteralType>
        } else {
            null
        }

    private val existingEnums = mutableMapOf<Set<String>, String>()

    private fun generateEnumType(
        name: String,
        options: List<LiteralType>,
        block: TypeSpec.Builder.() -> Unit = {}
    ): TypeSpec? {
        val stringOptions = options.map { it.value.content }.toSet()
        if (stringOptions in existingEnums) {
            require(existingEnums[stringOptions] == name) {
                "Enum with same options but different name already exists: ${existingEnums[stringOptions]}"
            }
            return null
        }
        existingEnums[stringOptions] = name

        return TypeSpec.enumBuilder(name).apply {
            addAnnotation(Serializable::class)

            for (option in options) {
                addEnumConstant(
                    option.value.content,
                    TypeSpec.anonymousClassBuilder().apply {
                        addDescription(option.description)
                    }.build()
                )
            }

            block()
        }.build()
            .also { enumTypes += name }
    }


    private fun tryGetItemOrArrayValue(
        type: UnionType
    ): TypeDefinition? {
        if (type.options.size != 2) return null
        val (first, second) = type.options
        if (second !is ArrayType || first != second.value) return null
        return first
    }

    private fun tryGetExtraSealedIntfName(type: UnionType): TypeName? {
        if (!type.options.all {
                it is BasicType
                        && it.value in input.concepts
            }) return null
        val options = type.options.map { (it as BasicType).value }.toSet()
        val name = input.extraSealedIntfs.find {
            it.subtypes == options
        }?.name ?: return null
        return ClassName(PACKAGE_NAME, name)
    }


    private inner class GeneratedType(
        private val typeName: TypeName,
        val declaration: TypeSpec?
    ) {
        fun putType(): TypeName {
            if (declaration != null) {
                file.addType(declaration)
            }
            return typeName
        }
    }

    private fun TypeName.toGenType() = GeneratedType(this, null)
    private fun mapTypeDefinition(
        type: TypeDefinition,
        context: GeneratedValue,
        property: PropertyOptions?,
        isRoot: Boolean = false
    ): GeneratedType = when (type) {
        is BasicType -> {
            val value = type.value
            if (value in predefined) {
                predefined[value]!!.toGenType()
            } else {
                check(value in input.concepts
                        || input.extraSealedIntfs.any { value == it.name }
                ) {
                    "Type not in generated concepts: $value"
                }
                ClassName(PACKAGE_NAME, value).toGenType()
            }
        }

        is ArrayType -> List::class.asClassName()
            .parameterizedBy(mapTypeDefinition(type.value, context, property).putType())
            .toGenType()

        is DictType -> Map::class.asClassName()
            .parameterizedBy(
                mapTypeDefinition(type.key, context, property).putType(),
                mapTypeDefinition(type.value, context, property).putType(),
            )
            .toGenType()

        is LiteralType -> {
            val value = type.value
            when {
                value.isString -> ClassName(PACKAGE_NAME, "UnknownStringLiteral").toGenType()
                else -> error("Unhandled literal type: $value")
            }
        }

        is TypeType -> mapTypeDefinition(type.value, context, property, isRoot)
        StructType -> {
            check(context is GeneratedConcept)
            val name = if (isRoot) context.inner.name else context.inner.name + "Values"
            GeneratedType(ClassName(PACKAGE_NAME, name), generateStructConcept(context, name))
        }

        is TupleType -> error("TupleType not supported")
        is UnionType -> tryGetEnumOptions(type)?.let { options ->
            val name = if (property == null) {
                check(context is GeneratedConcept)
                if (isRoot) {
                    context.inner.name
                } else {
                    context.innerEnumName ?: error("Inner enum name not specified for ${context.inner.name}")
                }
            } else {
                property.innerEnumName
                    ?: error("Inner enum name not specified for ${context.inner.name}.${property.inner.name}")
            }
            val enumType = generateEnumType(name, options) {
                if (isRoot && property == null) {
                    addDescription(context.inner.description)
                }
            }
            GeneratedType(ClassName(PACKAGE_NAME, name), enumType)
        } ?: tryGetItemOrArrayValue(type)?.let { item ->
            ClassName(PACKAGE_NAME, "ItemOrArray")
                .parameterizedBy(mapTypeDefinition(item, context, property).putType())
                .toGenType()
        } ?: tryGetExtraSealedIntfName(type)?.toGenType()
        ?: run {
            error("UnionType $type not supported")
//            Any::class.asClassName().toGenType()
        }
    }
}

fun Documentable.Builder<*>.addDescription(description: String?) {
    if (!description.isNullOrBlank()) {
        addKdoc("%L", description)
    }
}
